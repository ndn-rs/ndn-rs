use super::*;

impl Type {
    #[allow(clippy::len_without_is_empty)]
    pub fn len(&self) -> usize {
        VarNumber::from_u64(self.to_u64()).len()
    }

    pub fn to_u64(&self) -> u64 {
        match self {
            Self::Unassigned => 0,
            Self::ImplicitSha256DigestComponent => 1,
            Self::ParametersSha256DigestComponent => 2,
            Self::Interest => 5,
            Self::Data => todo!(),
            Self::Name => todo!(),
            Self::GenericNameComponent => todo!(),
            Self::Nonce => todo!(),
            Self::InterestLifetime => todo!(),
            Self::MustBeFresh => todo!(),
            Self::MetaInfo => todo!(),
            Self::Content => todo!(),
            Self::SignatureInfo => todo!(),
            Self::SignatureValue => todo!(),
            Self::ContentType => todo!(),
            Self::FreshnessPeriod => todo!(),
            Self::FinalBlockId => todo!(),
            Self::SignatureType => todo!(),
            Self::KeyLocator => todo!(),
            Self::KeyDigest => todo!(),
            Self::ForwardingHint => todo!(),
            Self::KeywordNameComponent => todo!(),
            Self::CanBePrefix => todo!(),
            Self::HopLimit => todo!(),
            Self::ApplicationParameters => todo!(),
            Self::SignatureNonce => todo!(),
            Self::SignatureTime => todo!(),
            Self::SignatureSeqNum => todo!(),
            Self::InterestSignatureInfo => todo!(),
            Self::InterestSignatureValue => todo!(),
            Self::Fragment => todo!(),
            Self::Sequence => todo!(),
            Self::FragIndex => todo!(),
            Self::FragCount => todo!(),
            Self::HopCount => todo!(),
            Self::GeoTag => todo!(),
            Self::PitToken => todo!(),
            Self::LpPacket => todo!(),
            Self::ControlResponse => todo!(),
            Self::StatusCode => todo!(),
            Self::StatusText => todo!(),
            Self::ControlParameters => todo!(),
            Self::FaceId => todo!(),
            Self::Cost => todo!(),
            Self::Strategy => todo!(),
            Self::Flags => todo!(),
            Self::ExpirationPeriod => todo!(),
            Self::Origin => todo!(),
            Self::Mask => todo!(),
            Self::Uri => todo!(),
            Self::FaceStatus => todo!(),
            Self::LocalUri => todo!(),
            Self::ChannelStatus => todo!(),
            Self::Capacity => todo!(),
            Self::Count => todo!(),
            Self::FacePersistency => todo!(),
            Self::LinkType => todo!(),
            Self::BaseCongestionMarkingInterval => todo!(),
            Self::DefaultCongestionThreshold => todo!(),
            Self::Mtu => todo!(),
            Self::NInInterests => todo!(),
            Self::NInData => todo!(),
            Self::NOutInterests => todo!(),
            Self::NOutData => todo!(),
            Self::NInBytes => todo!(),
            Self::NOutBytes => todo!(),
            Self::FaceQueryFilter => todo!(),
            Self::NInNacks => todo!(),
            Self::NOutNacks => todo!(),
            Self::FaceEventNotification => todo!(),
            Self::FaceEVentKind => todo!(),
            Self::Nack => todo!(),
            Self::NackReason => todo!(),
            Self::IncomingFaceId => todo!(),
            Self::NextHopFaceId => todo!(),
            Self::CachePolicy => todo!(),
            Self::CachePolicyType => todo!(),
            Self::CongestionMark => todo!(),
            Self::Ack => todo!(),
            Self::TxSequence => todo!(),
            Self::NonDiscovery => todo!(),
            Self::PrefixAnnouncement => todo!(),
            Self::ValidityPeriod => todo!(),
            Self::NotBefore => todo!(),
            Self::NotAfter => todo!(),
            Self::AdditionalDescription => todo!(),
            Self::DescriptionEntry => todo!(),
            Self::DescriptionKey => todo!(),
            Self::DescriptionValue => todo!(),
            Self::Unknown(unknown) => *unknown,
        }
    }
}

impl From<u64> for Type {
    fn from(value: u64) -> Self {
        match value {
            0 => Self::Unassigned,
            1 => Self::ImplicitSha256DigestComponent,
            2 => Self::ParametersSha256DigestComponent,
            5 => Self::Interest,
            // Self::Data => Self::Data,
            // Self::Name => Self::Name,
            // Self::GenericNameComponent => Self::GenericNameComponent,
            // Self::Nonce => Self::Nonce,
            // Self::InterestLifetime => Self::InterestLifetime,
            // Self::MustBeFresh => Self::MustBeFresh,
            // Self::MetaInfo => Self::MetaInfo,
            // Self::Content => Self::Content,
            // Self::SignatureInfo => Self::SignatureInfo,
            // Self::SignatureValue => Self::SignatureValue,
            // Self::ContentType => Self::ContentType,
            // Self::FreshnessPeriod => Self::FreshnessPeriod,
            // Self::FinalBlockId => Self::FinalBlockId,
            // Self::SignatureType => Self::SignatureType,
            // Self::KeyLocator => Self::KeyLocator,
            // Self::KeyDigest => Self::KeyDigest,
            // Self::ForwardingHint => Self::ForwardingHint,
            // Self::KeywordNameComponent => Self::KeywordNameComponent,
            // Self::CanBePrefix => Self::CanBePrefix,
            // Self::HopLimit => Self::HopLimit,
            // Self::ApplicationParameters => Self::ApplicationParameters,
            // Self::SignatureNonce => Self::SignatureNonce,
            // Self::SignatureTime => Self::SignatureTime,
            // Self::SignatureSeqNum => Self::SignatureSeqNum,
            // Self::InterestSignatureInfo => Self::InterestSignatureInfo,
            // Self::InterestSignatureValue => Self::InterestSignatureValue,
            // Self::Fragment => Self::Fragment,
            // Self::Sequence => Self::Sequence,
            // Self::FragIndex => Self::FragIndex,
            // Self::FragCount => Self::FragCount,
            // Self::HopCount => Self::HopCount,
            // Self::GeoTag => Self::GeoTag,
            // Self::PitToken => Self::PitToken,
            // Self::LpPacket => Self::LpPacket,
            // Self::ControlResponse => Self::ControlResponse,
            // Self::StatusCode => Self::StatusCode,
            // Self::StatusText => Self::StatusText,
            // Self::ControlParameters => Self::ControlParameters,
            // Self::FaceId => Self::FaceId,
            // Self::Cost => Self::Cost,
            // Self::Strategy => Self::Strategy,
            // Self::Flags => Self::Flags,
            // Self::ExpirationPeriod => Self::ExpirationPeriod,
            // Self::Origin => Self::Origin,
            // Self::Mask => Self::Mask,
            // Self::Uri => Self::Uri,
            // Self::FaceStatus => Self::FaceStatus,
            // Self::LocalUri => Self::LocalUri,
            // Self::ChannelStatus => Self::ChannelStatus,
            // Self::Capacity => Self::Capacity,
            // Self::Count => Self::Count,
            // Self::FacePersistency => Self::FacePersistency,
            // Self::LinkType => Self::LinkType,
            // Self::BaseCongestionMarkingInterval => Self::BaseCongestionMarkingInterval,
            // Self::DefaultCongestionThreshold => Self::DefaultCongestionThreshold,
            // Self::Mtu => Self::Mtu,
            // Self::NInInterests => Self::NInInterests,
            // Self::NInData => Self::NInData,
            // Self::NOutInterests => Self::NOutInterests,
            // Self::NOutData => Self::NOutData,
            // Self::NInBytes => Self::NInBytes,
            // Self::NOutBytes => Self::NOutBytes,
            // Self::FaceQueryFilter => Self::FaceQueryFilter,
            // Self::NInNacks => Self::NInNacks,
            // Self::NOutNacks => Self::NOutNacks,
            // Self::FaceEventNotification => Self::FaceEventNotification,
            // Self::FaceEVentKind => Self::FaceEVentKind,
            // Self::Nack => Self::Nack,
            // Self::NackReason => Self::NackReason,
            // Self::IncomingFaceId => Self::IncomingFaceId,
            // Self::NextHopFaceId => Self::NextHopFaceId,
            // Self::CachePolicy => Self::CachePolicy,
            // Self::CachePolicyType => Self::CachePolicyType,
            // Self::CongestionMark => Self::CongestionMark,
            // Self::Ack => Self::Ack,
            // Self::TxSequence => Self::TxSequence,
            // Self::NonDiscovery => Self::NonDiscovery,
            // Self::PrefixAnnouncement => Self::PrefixAnnouncement,
            // Self::ValidityPeriod => Self::ValidityPeriod,
            // Self::NotBefore => Self::NotBefore,
            // Self::NotAfter => Self::NotAfter,
            // Self::AdditionalDescription => Self::AdditionalDescription,
            // Self::DescriptionEntry => Self::DescriptionEntry,
            // Self::DescriptionKey => Self::DescriptionKey,
            // Self::DescriptionValue => Self::DescriptionValue,
            other => Self::Unknown(other),
        }
    }
}

impl From<Type> for u64 {
    fn from(value: Type) -> Self {
        value.to_u64()
    }
}
